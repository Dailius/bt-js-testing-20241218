{
	"info": {
		"_postman_id": "0113e6bb-2357-4032-b073-4c36e3de8229",
		"name": "restful-booker",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "15497739",
		"_collection_link": "https://bt-js-test20241218.postman.co/workspace/demo_workspace~91abd546-b4d4-4c44-a2b5-53528403e57b/collection/15497739-0113e6bb-2357-4032-b073-4c36e3de8229?action=share&source=collection_link&creator=15497739"
	},
	"item": [
		{
			"name": "Token",
			"item": [
				{
					"name": "Create token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test('Response status code 200', function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('Check responseBody', () => {\r",
									"    const responseBody = pm.response.json();\r",
									"    pm.expect(responseBody).to.be.an('object');\r",
									"    pm.expect(responseBody.token).to.be.a('string').and.not.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"pm.collectionVariables.set('token', pm.response.json());\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"admin\",\r\n    \"password\": \"password123\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://restful-booker.herokuapp.com/auth",
							"protocol": "https",
							"host": [
								"restful-booker",
								"herokuapp",
								"com"
							],
							"path": [
								"auth"
							]
						}
					},
					"response": []
				},
				{
					"name": "Without username",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseBody = pm.response.json();\r",
									"\r",
									"pm.test('Response status code 400', function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test('Missing credentials', () => {\r",
									"    pm.expect(responseBody).to.be.an('object');\r",
									"    pm.expect(responseBody.reason).to.be.eql('Bad credentials');\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"password\": \"password123\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base-url}}/auth",
							"host": [
								"{{base-url}}"
							],
							"path": [
								"auth"
							]
						}
					},
					"response": []
				},
				{
					"name": "Empty username",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseBody = pm.response.json();\r",
									"\r",
									"pm.test('Response status code 400', function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test('Missing credentials', () => {\r",
									"    pm.expect(responseBody).to.be.an('object');\r",
									"    pm.expect(responseBody.reason).to.be.eql('Bad credentials');\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"\",\r\n    \"password\": \"password123\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base-url}}/auth",
							"host": [
								"{{base-url}}"
							],
							"path": [
								"auth"
							]
						}
					},
					"response": []
				},
				{
					"name": "Not existing username",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseBody = pm.response.json();\r",
									"\r",
									"pm.test('Response status code 400', function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test('Missing credentials', () => {\r",
									"    pm.expect(responseBody).to.be.an('object');\r",
									"    pm.expect(responseBody.reason).to.be.eql('Bad credentials');\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"incorrect_name\",\r\n    \"password\": \"password123\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base-url}}/auth",
							"host": [
								"{{base-url}}"
							],
							"path": [
								"auth"
							]
						}
					},
					"response": []
				},
				{
					"name": "Empty password",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseBody = pm.response.json();\r",
									"\r",
									"pm.test('Response status code 400', function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test('Missing credentials', () => {\r",
									"    pm.expect(responseBody).to.be.an('object');\r",
									"    pm.expect(responseBody.reason).to.be.eql('Bad credentials');\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"admin\",\r\n    \"password\": \"\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base-url}}/auth",
							"host": [
								"{{base-url}}"
							],
							"path": [
								"auth"
							]
						}
					},
					"response": []
				},
				{
					"name": "Without password",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseBody = pm.response.json();\r",
									"\r",
									"pm.test('Response status code 400', function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test('Missing credentials', () => {\r",
									"    pm.expect(responseBody).to.be.an('object');\r",
									"    pm.expect(responseBody.reason).to.be.eql('Bad credentials');\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"admin\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base-url}}/auth",
							"host": [
								"{{base-url}}"
							],
							"path": [
								"auth"
							]
						}
					},
					"response": []
				},
				{
					"name": "Empty password",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseBody = pm.response.json();\r",
									"\r",
									"pm.test('Response status code 400', function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test('Missing credentials', () => {\r",
									"    pm.expect(responseBody).to.be.an('object');\r",
									"    pm.expect(responseBody.reason).to.be.eql('Bad credentials');\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"admin\",\r\n    \"password\": \"\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base-url}}/auth",
							"host": [
								"{{base-url}}"
							],
							"path": [
								"auth"
							]
						}
					},
					"response": []
				},
				{
					"name": "Not existing password",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseBody = pm.response.json();\r",
									"\r",
									"pm.test('Response status code 400', function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test('Missing credentials', () => {\r",
									"    pm.expect(responseBody).to.be.an('object');\r",
									"    pm.expect(responseBody.reason).to.be.eql('Bad credentials');\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"admin\",\r\n    \"password\": \"incorrect_pass\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base-url}}/auth",
							"host": [
								"{{base-url}}"
							],
							"path": [
								"auth"
							]
						}
					},
					"response": []
				},
				{
					"name": "Empty credentials",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseBody = pm.response.json();\r",
									"\r",
									"pm.test('Response status code 400', function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test('Missing credentials', () => {\r",
									"    pm.expect(responseBody).to.be.an('object');\r",
									"    pm.expect(responseBody.reason).to.be.eql('Bad credentials');\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"\",\r\n    \"password\": \"\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base-url}}/auth",
							"host": [
								"{{base-url}}"
							],
							"path": [
								"auth"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Create booking",
			"item": [
				{
					"name": "Booking with valid data",
					"item": [
						{
							"name": "With all required data",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function rand(min, max) {\r",
											"  const minCeiled = Math.ceil(min);\r",
											"  const maxFloored = Math.floor(max);\r",
											"  return Math.floor(Math.random() * (maxFloored - minCeiled) + minCeiled); // The maximum is exclusive and the minimum is inclusive\r",
											"}\r",
											"\r",
											"let randomNumber = rand(1, 30); \r",
											"\r",
											"\r",
											"pm.collectionVariables.set(\"randomNumber\", randomNumber);\r",
											"\r",
											"const newBook = {\r",
											"    \"firstname\": \"Vardenis\",\r",
											"    \"lastname\": \"Pavardenis\",\r",
											"    \"totalprice\": randomNumber,\r",
											"    \"depositpaid\": true,\r",
											"    \"bookingdates\" : {\r",
											"        \"checkin\": \"2025-03-31\",\r",
											"        \"checkout\": \"2025-04-09\"\r",
											"    },\r",
											"    \"additionalneeds\": \"Pizza\"\r",
											"};\r",
											"\r",
											"pm.request.body.raw = newBook;"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.collectionVariables.set('first-name', pm.response.json().booking.firstname);\r",
											"pm.collectionVariables.set('last-name', pm.response.json().booking.lastname);\r",
											"pm.collectionVariables.set('randomNumber', pm.response.json().booking.totalprice);\r",
											"pm.collectionVariables.set('deposit-paid', pm.response.json().booking.depositpaid);\r",
											"pm.collectionVariables.set('check-in', pm.response.json().booking.bookingdates.checkin);\r",
											"pm.collectionVariables.set('check-out', pm.response.json().booking.bookingdates.checkout);\r",
											"\r",
											"const bookingId = pm.collectionVariables.set('bookingid', pm.response.json().bookingid);\r",
											"\r",
											"\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Checking properties\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.bookingid).to.be.a('number').and.is.not.null;\r",
											"\r",
											"    pm.expect(jsonData.booking.firstname).to.eql(pm.collectionVariables.get('first-name')).and.to.be.a('string');\r",
											"    pm.expect(jsonData.booking.lastname).to.eql(pm.collectionVariables.get('last-name')).and.to.be.a('string');\r",
											"\r",
											"    pm.expect(jsonData.booking.totalprice).to.eql(pm.collectionVariables.get('randomNumber')).and.to.be.a('number');;\r",
											"\r",
											"    pm.expect(jsonData.booking.depositpaid).to.eql(pm.collectionVariables.get('deposit-paid')).and.to.be.a('boolean');\r",
											"\r",
											"    pm.expect(jsonData.booking.bookingdates).to.be.an('object').and.is.not.null;\r",
											"\r",
											"    pm.expect(jsonData.booking.bookingdates.checkin).to.eql(pm.collectionVariables.get('check-in')).to.be.a('string').and.is.not.empty;\r",
											"    pm.expect(jsonData.booking.bookingdates.checkout).to.eql(pm.collectionVariables.get('check-out')).to.be.a('string').and.is.not.empty;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstname\" : \"Vardenis\",\r\n    \"lastname\" : \"Pavardenis\",\r\n    \"totalprice\" : 12,\r\n    \"depositpaid\" : \"false\",\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2025-03-31\",\r\n        \"checkout\" : \"2025-04-09\"\r\n    },\r\n    \"additionalneeds\" : \"Pizza\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{colBasUrl}}/booking",
									"host": [
										"{{colBasUrl}}"
									],
									"path": [
										"booking"
									]
								}
							},
							"response": []
						},
						{
							"name": "Check if booking id created",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseBody = pm.response.json();\r",
											"\r",
											"pm.test('Response status code 200', () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('Check if there is a booking ID property', () => {\r",
											"    pm.expect(responseBody).to.have.property('bookingid').to.be.a('number').and.is.not.null;\r",
											"});\r",
											"\r",
											"\r",
											"pm.test('Check if data is correct', () => {\r",
											"    pm.expect(responseBody.bookingid).to.be.eql(pm.collectionVariables.get('bookingid'));\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 500ms\", () => {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base-url}}/booking/{{bookingid}}",
									"host": [
										"{{base-url}}"
									],
									"path": [
										"booking",
										"{{bookingid}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Firstname",
					"item": [
						{
							"name": "Without firstname",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const newBook = {\r",
											"    \"lastname\": \"Pavardenis\",\r",
											"    \"totalprice\": 12,\r",
											"    \"depositpaid\": \"true\",\r",
											"    \"bookingdates\" : {\r",
											"        \"checkin\": \"2025-03-31\",\r",
											"        \"checkout\": \"2025-04-09\"\r",
											"    },\r",
											"    \"additionalneeds\": \"Pizza\"\r",
											"};\r",
											"pm.request.body.raw = newBook;"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseBody = pm.response.text();\r",
											"\r",
											"pm.test(\"Status code is 400\", () => {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Check responseBody without firstname\", () => {\r",
											"    pm.expect(responseBody).to.have.nested.property(\"booking.firstname\").that.is.a(\"string\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base-url}}/booking",
									"host": [
										"{{base-url}}"
									],
									"path": [
										"booking"
									]
								}
							},
							"response": []
						},
						{
							"name": "Empty firstname",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const newBook = {\r",
											"    \"firstname\": \"\",\r",
											"    \"lastname\": \"Pavardenis\",\r",
											"    \"totalprice\": 12,\r",
											"    \"depositpaid\": \"true\",\r",
											"    \"bookingdates\" : {\r",
											"        \"checkin\": \"2025-03-31\",\r",
											"        \"checkout\": \"2025-04-09\"\r",
											"    },\r",
											"    \"additionalneeds\": \"Pizza\"\r",
											"};\r",
											"pm.request.body.raw = newBook;"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseBody = pm.response.json();\r",
											"\r",
											"pm.test(\"Status code is 400\", () => {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Check responseBody property\", () => {\r",
											"    pm.expect(responseBody).to.have.nested.property(\"booking.firstname\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check responseBody type/value\", () => {\r",
											"    pm.expect(responseBody.booking.firstname).to.be.a('string').and.is.not.empty;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base-url}}/booking",
									"host": [
										"{{base-url}}"
									],
									"path": [
										"booking"
									]
								}
							},
							"response": []
						},
						{
							"name": "Adding number into firstname",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const newBook = {\r",
											"    \"firstname\": 1234,\r",
											"    \"lastname\": \"Pavardenis\",\r",
											"    \"totalprice\": 12,\r",
											"    \"depositpaid\": \"true\",\r",
											"    \"bookingdates\" : {\r",
											"        \"checkin\": \"2025-03-31\",\r",
											"        \"checkout\": \"2025-04-09\"\r",
											"    },\r",
											"    \"additionalneeds\": \"Pizza\"\r",
											"};\r",
											"pm.request.body.raw = newBook;"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseBody = pm.response.text();\r",
											"\r",
											"pm.test(\"Status code is 400\", () => {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Check responseBody property\", () => {\r",
											"    pm.expect(responseBody).to.have.nested.property(\"booking.firstname\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check responseBody type/value\", () => {\r",
											"    pm.expect(responseBody.booking.firstname).to.be.a('string').and.is.not.empty;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base-url}}/booking",
									"host": [
										"{{base-url}}"
									],
									"path": [
										"booking"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Lastname",
					"item": [
						{
							"name": "Without lastname",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const newBook = {\r",
											"    \"firstname\": \"Vardenis\",\r",
											"    \"totalprice\": 12,\r",
											"    \"depositpaid\": \"true\",\r",
											"    \"bookingdates\" : {\r",
											"        \"checkin\": \"2025-03-31\",\r",
											"        \"checkout\": \"2025-04-09\"\r",
											"    },\r",
											"    \"additionalneeds\": \"Pizza\"\r",
											"};\r",
											"pm.request.body.raw = newBook;"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseBody = pm.response.text();\r",
											"\r",
											"pm.test(\"Status code is 400\", () => {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Check responseBody without lastname\", () => {\r",
											"    pm.expect(responseBody).to.have.nested.property(\"booking.lastname\").that.is.a(\"string\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base-url}}/booking",
									"host": [
										"{{base-url}}"
									],
									"path": [
										"booking"
									]
								}
							},
							"response": []
						},
						{
							"name": "Empty lastname",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const newBook = {\r",
											"    \"firstname\": \"Kazkas\",\r",
											"    \"lastname\": \"\",\r",
											"    \"totalprice\": 12,\r",
											"    \"depositpaid\": \"true\",\r",
											"    \"bookingdates\" : {\r",
											"        \"checkin\": \"2025-03-31\",\r",
											"        \"checkout\": \"2025-04-09\"\r",
											"    },\r",
											"    \"additionalneeds\": \"Pizza\"\r",
											"};\r",
											"pm.request.body.raw = newBook;"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseBody = pm.response.json();\r",
											"\r",
											"pm.test(\"Status code is 400\", () => {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Check responseBody property\", () => {\r",
											"    pm.expect(responseBody).to.have.nested.property(\"booking.lastname\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check responseBody type/value\", () => {\r",
											"    pm.expect(responseBody.booking.lastname).to.be.a('string').and.is.not.empty;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base-url}}/booking",
									"host": [
										"{{base-url}}"
									],
									"path": [
										"booking"
									]
								}
							},
							"response": []
						},
						{
							"name": "Adding number into lastname",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const newBook = {\r",
											"    \"firstname\": \"Vardenis\",\r",
											"    \"lastname\": 1234,\r",
											"    \"totalprice\": 12,\r",
											"    \"depositpaid\": \"true\",\r",
											"    \"bookingdates\" : {\r",
											"        \"checkin\": \"2025-03-31\",\r",
											"        \"checkout\": \"2025-04-09\"\r",
											"    },\r",
											"    \"additionalneeds\": \"Pizza\"\r",
											"};\r",
											"pm.request.body.raw = newBook;"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseBody = pm.response.text();\r",
											"\r",
											"pm.test(\"Status code is 400\", () => {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Check responseBody property\", () => {\r",
											"    pm.expect(responseBody).to.have.nested.property(\"booking.lastname\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check responseBody type/value\", () => {\r",
											"    pm.expect(responseBody.booking.lastname).to.be.a('string').and.is.not.empty;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base-url}}/booking",
									"host": [
										"{{base-url}}"
									],
									"path": [
										"booking"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Totalprice",
					"item": [
						{
							"name": "Without totalprice",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const newBook = {\r",
											"    \"firstname\": \"Vardenis\",\r",
											"    \"lastname\": \"Pavardenis\",\r",
											"    \"depositpaid\": \"true\",\r",
											"    \"bookingdates\" : {\r",
											"        \"checkin\": \"2025-03-31\",\r",
											"        \"checkout\": \"2025-04-09\"\r",
											"    },\r",
											"    \"additionalneeds\": \"Pizza\"\r",
											"};\r",
											"pm.request.body.raw = newBook;"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseBody = pm.response.text();\r",
											"\r",
											"pm.test(\"Status code is 400\", () => {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Check responseBody without lastname\", () => {\r",
											"    pm.expect(responseBody).to.have.nested.property(\"booking.totalprice\").that.is.a(\"string\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base-url}}/booking",
									"host": [
										"{{base-url}}"
									],
									"path": [
										"booking"
									]
								}
							},
							"response": []
						},
						{
							"name": "Null totalprice",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const newBook = {\r",
											"    \"firstname\": \"Kazkas\",\r",
											"    \"lastname\": \"Kazkas\",\r",
											"    \"totalprice\": null,\r",
											"    \"depositpaid\": \"true\",\r",
											"    \"bookingdates\" : {\r",
											"        \"checkin\": \"2025-03-31\",\r",
											"        \"checkout\": \"2025-04-09\"\r",
											"    },\r",
											"    \"additionalneeds\": \"Pizza\"\r",
											"};\r",
											"pm.request.body.raw = newBook;"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseBody = pm.response.text();\r",
											"\r",
											"pm.test(\"Status code is 400\", () => {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Check responseBody property\", () => {\r",
											"    pm.expect(responseBody).to.have.nested.property(\"booking.totalprice\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check responseBody type/value\", () => {\r",
											"    pm.expect(responseBody.booking.totalprice).to.be.a('number').and.is.not.null;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base-url}}/booking",
									"host": [
										"{{base-url}}"
									],
									"path": [
										"booking"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add number as text into totalprice",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const newBook = {\r",
											"    \"firstname\": \"Kazkas\",\r",
											"    \"lastname\": \"Kazkas\",\r",
											"    \"totalprice\": \"15\",\r",
											"    \"depositpaid\": \"true\",\r",
											"    \"bookingdates\" : {\r",
											"        \"checkin\": \"2025-03-31\",\r",
											"        \"checkout\": \"2025-04-09\"\r",
											"    },\r",
											"    \"additionalneeds\": \"Pizza\"\r",
											"};\r",
											"pm.request.body.raw = newBook;"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseBody = pm.response.json();\r",
											"\r",
											"pm.test(\"Status code is 200\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check responseBody property\", () => {\r",
											"    pm.expect(responseBody).to.have.nested.property(\"booking.totalprice\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check responseBody type/value\", () => {\r",
											"    pm.expect(responseBody.booking.totalprice).to.be.a('number').and.is.not.null;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base-url}}/booking",
									"host": [
										"{{base-url}}"
									],
									"path": [
										"booking"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add text into totalprice",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const newBook = {\r",
											"    \"firstname\": \"Kazkas\",\r",
											"    \"lastname\": \"Kazkas\",\r",
											"    \"totalprice\": \"asdasd-?\",\r",
											"    \"depositpaid\": \"true\",\r",
											"    \"bookingdates\" : {\r",
											"        \"checkin\": \"2025-03-31\",\r",
											"        \"checkout\": \"2025-04-09\"\r",
											"    },\r",
											"    \"additionalneeds\": \"Pizza\"\r",
											"};\r",
											"pm.request.body.raw = newBook;"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseBody = pm.response.json();\r",
											"\r",
											"pm.test(\"Status code is 400\", () => {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Check responseBody property\", () => {\r",
											"    pm.expect(responseBody).to.have.nested.property(\"booking.totalprice\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check responseBody type/value\", () => {\r",
											"    pm.expect(responseBody.booking.totalprice).to.be.a('number').and.is.not.null;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base-url}}/booking",
									"host": [
										"{{base-url}}"
									],
									"path": [
										"booking"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Depositpaid",
					"item": [
						{
							"name": "Without depositpaid",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const newBook = {\r",
											"    \"firstname\": \"Kazkas\",\r",
											"    \"lastname\": \"Kazkas\",\r",
											"    \"totalprice\": 123,\r",
											"    \"bookingdates\" : {\r",
											"        \"checkin\": \"2025-03-31\",\r",
											"        \"checkout\": \"2025-04-09\"\r",
											"    },\r",
											"    \"additionalneeds\": \"Pizza\"\r",
											"};\r",
											"pm.request.body.raw = newBook;"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseBody = pm.response.text();\r",
											"\r",
											"pm.test(\"Status code is 400\", () => {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Check responseBody property\", () => {\r",
											"    pm.expect(responseBody).to.have.nested.property(\"booking.depositpaid\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check responseBody type/value\", () => {\r",
											"    pm.expect(responseBody.booking.depositpaid).to.be.a('boolean').and.is.not.null;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base-url}}/booking",
									"host": [
										"{{base-url}}"
									],
									"path": [
										"booking"
									]
								}
							},
							"response": []
						},
						{
							"name": "Null depositpaid",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const newBook = {\r",
											"    \"firstname\": \"Kazkas\",\r",
											"    \"lastname\": \"Kazkas\",\r",
											"    \"totalprice\": 123,\r",
											"    \"depositpaid\": null,\r",
											"    \"bookingdates\" : {\r",
											"        \"checkin\": \"2025-03-31\",\r",
											"        \"checkout\": \"2025-04-09\"\r",
											"    },\r",
											"    \"additionalneeds\": \"Pizza\"\r",
											"};\r",
											"pm.request.body.raw = newBook;"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseBody = pm.response.text();\r",
											"\r",
											"pm.test(\"Status code is 400\", () => {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Check responseBody property\", () => {\r",
											"    pm.expect(responseBody).to.have.nested.property(\"booking.depositpaid\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check responseBody type/value\", () => {\r",
											"    pm.expect(responseBody.booking.depositpaid).to.be.a('boolean').and.is.not.null;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base-url}}/booking",
									"host": [
										"{{base-url}}"
									],
									"path": [
										"booking"
									]
								}
							},
							"response": []
						},
						{
							"name": "Provide not boolean type for depositpaid",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const newBook = {\r",
											"    \"firstname\": \"Kazkas\",\r",
											"    \"lastname\": \"Kazkas\",\r",
											"    \"totalprice\": 123,\r",
											"    \"depositpaid\": 123,\r",
											"    \"bookingdates\": {\r",
											"        \"checkin\": \"2025-03-31\",\r",
											"        \"checkout\": \"2025-04-09\"\r",
											"    },\r",
											"    \"additionalneeds\": \"Pizza\"\r",
											"};\r",
											"pm.request.body.raw = newBook;"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseBody = pm.response.json();\r",
											"\r",
											"pm.test(\"Status code is 200\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check responseBody property\", () => {\r",
											"    pm.expect(responseBody).to.have.nested.property(\"booking.depositpaid\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check responseBody type/value\", () => {\r",
											"    pm.expect(responseBody.booking.depositpaid).to.be.a('boolean').and.is.not.null;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base-url}}/booking",
									"host": [
										"{{base-url}}"
									],
									"path": [
										"booking"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Bookingdates",
					"item": [
						{
							"name": "Without bookingdates",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const newBook = {\r",
											"    \"firstname\": \"Kazkas\",\r",
											"    \"lastname\": \"Kazkas\",\r",
											"    \"totalprice\": 123,\r",
											"    \"depositpaid\": 12,\r",
											"    \"additionalneeds\": \"Pizza\"\r",
											"};\r",
											"pm.request.body.raw = newBook;"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseBody = pm.response.text();\r",
											"\r",
											"pm.test(\"Status code is 400\", () => {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Check responseBody property\", () => {\r",
											"    pm.expect(responseBody).to.have.nested.property(\"booking.bookingdates\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check responseBody type/value\", () => {\r",
											"    pm.expect(responseBody.booking.bookingdates).to.be.an('object').and.is.not.empty;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base-url}}/booking",
									"host": [
										"{{base-url}}"
									],
									"path": [
										"booking"
									]
								}
							},
							"response": []
						},
						{
							"name": "Without checkin",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const newBook = {\r",
											"    \"firstname\": \"Kazkas\",\r",
											"    \"lastname\": \"Kazkas\",\r",
											"    \"totalprice\": 123,\r",
											"    \"depositpaid\": 12,\r",
											"    \"bookingdates\": {\r",
											"        \"checkout\": \"2025-04-09\"\r",
											"    },\r",
											"    \"additionalneeds\": \"Pizza\"\r",
											"};\r",
											"pm.request.body.raw = newBook;"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseBody = pm.response.text();\r",
											"\r",
											"pm.test(\"Status code is 400\", () => {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Check responseBody property\", () => {\r",
											"    pm.expect(responseBody).to.have.nested.property(\"booking.bookingdates.checkin\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check responseBody type/value\", () => {\r",
											"    pm.expect(responseBody.booking.bookingdates.checkin).to.be.a('string').and.is.not.empty;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base-url}}/booking",
									"host": [
										"{{base-url}}"
									],
									"path": [
										"booking"
									]
								}
							},
							"response": []
						},
						{
							"name": "Without checkout",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const newBook = {\r",
											"    \"firstname\": \"Kazkas\",\r",
											"    \"lastname\": \"Kazkas\",\r",
											"    \"totalprice\": 123,\r",
											"    \"depositpaid\": 12,\r",
											"    \"bookingdates\": {\r",
											"        \"checkin\": \"2025-03-31\",\r",
											"    },\r",
											"    \"additionalneeds\": \"Pizza\"\r",
											"};\r",
											"pm.request.body.raw = newBook;"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseBody = pm.response.text();\r",
											"\r",
											"pm.test(\"Status code is 400\", () => {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Check responseBody property\", () => {\r",
											"    pm.expect(responseBody).to.have.nested.property(\"booking.bookingdates.checkout\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check responseBody type/value\", () => {\r",
											"    pm.expect(responseBody.booking.bookingdates.checkout).to.be.a('string').and.is.not.empty;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base-url}}/booking",
									"host": [
										"{{base-url}}"
									],
									"path": [
										"booking"
									]
								}
							},
							"response": []
						},
						{
							"name": "Empty checkin",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const newBook = {\r",
											"    \"firstname\": \"Kazkas\",\r",
											"    \"lastname\": \"Kazkas\",\r",
											"    \"totalprice\": 123,\r",
											"    \"depositpaid\": 12,\r",
											"    \"bookingdates\": {\r",
											"        \"checkin\": \"\",\r",
											"        \"checkout\": \"2025-04-09\"\r",
											"    },\r",
											"    \"additionalneeds\": \"Pizza\"\r",
											"};\r",
											"pm.request.body.raw = newBook;"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseBody = pm.response.json();\r",
											"\r",
											"pm.test(\"Status code is 400\", () => {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Check responseBody property\", () => {\r",
											"    pm.expect(responseBody).to.have.nested.property(\"booking.bookingdates.checkin\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check if checkin date is not empty\", () => {\r",
											"    pm.expect(responseBody.booking.bookingdates.checkin).to.be.a('string').and.is.not.equal('0NaN-aN-aN');\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base-url}}/booking",
									"host": [
										"{{base-url}}"
									],
									"path": [
										"booking"
									]
								}
							},
							"response": []
						},
						{
							"name": "Empty checkout",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const newBook = {\r",
											"    \"firstname\": \"Kazkas\",\r",
											"    \"lastname\": \"Kazkas\",\r",
											"    \"totalprice\": 123,\r",
											"    \"depositpaid\": 12,\r",
											"    \"bookingdates\": {\r",
											"        \"checkin\": \"2025-04-02\",\r",
											"        \"checkout\": \"\"\r",
											"    },\r",
											"    \"additionalneeds\": \"Pizza\"\r",
											"};\r",
											"pm.request.body.raw = newBook;"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseBody = pm.response.json();\r",
											"\r",
											"pm.test(\"Status code is 400\", () => {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Check responseBody property\", () => {\r",
											"    pm.expect(responseBody).to.have.nested.property(\"booking.bookingdates.checkout\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check responseBody type/value\", () => {\r",
											"    pm.expect(responseBody.booking.bookingdates.checkout).to.be.a('string').and.is.not.equal('0NaN-aN-aN');\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base-url}}/booking",
									"host": [
										"{{base-url}}"
									],
									"path": [
										"booking"
									]
								}
							},
							"response": []
						},
						{
							"name": "Incorrect date format into checkin",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const newBook = {\r",
											"    \"firstname\": \"Kazkas\",\r",
											"    \"lastname\": \"Kazkas\",\r",
											"    \"totalprice\": 123,\r",
											"    \"depositpaid\": 12,\r",
											"    \"bookingdates\": {\r",
											"        \"checkin\": \"2025-28-02\",\r",
											"        \"checkout\": \"2025-04-09\"\r",
											"    },\r",
											"    \"additionalneeds\": \"Pizza\"\r",
											"};\r",
											"pm.request.body.raw = newBook;"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseBody = pm.response.json();\r",
											"\r",
											"pm.test(\"Status code is 400\", () => {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Check responseBody property\", () => {\r",
											"    pm.expect(responseBody).to.have.nested.property(\"booking.bookingdates.checkin\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check if checkin date is not empty\", () => {\r",
											"    pm.expect(responseBody.booking.bookingdates.checkin).to.be.a('string').and.is.not.equal('0NaN-aN-aN');\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base-url}}/booking",
									"host": [
										"{{base-url}}"
									],
									"path": [
										"booking"
									]
								}
							},
							"response": []
						},
						{
							"name": "Incorrect date format into checkout",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const newBook = {\r",
											"    \"firstname\": \"Kazkas\",\r",
											"    \"lastname\": \"Kazkas\",\r",
											"    \"totalprice\": 123,\r",
											"    \"depositpaid\": 12,\r",
											"    \"bookingdates\": {\r",
											"        \"checkin\": \"2025-02-23\",\r",
											"        \"checkout\": \"2025-29-03\"\r",
											"    },\r",
											"    \"additionalneeds\": \"Pizza\"\r",
											"};\r",
											"pm.request.body.raw = newBook;"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseBody = pm.response.json();\r",
											"\r",
											"pm.test(\"Status code is 400\", () => {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Check responseBody property\", () => {\r",
											"    pm.expect(responseBody).to.have.nested.property(\"booking.bookingdates.checkout\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check if checkin date is not empty\", () => {\r",
											"    pm.expect(responseBody.booking.bookingdates.checkout).to.be.a('string').and.is.not.equal('0NaN-aN-aN');\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base-url}}/booking",
									"host": [
										"{{base-url}}"
									],
									"path": [
										"booking"
									]
								}
							},
							"response": []
						},
						{
							"name": "Null into checkin",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const newBook = {\r",
											"    \"firstname\": \"Kazkas\",\r",
											"    \"lastname\": \"Kazkas\",\r",
											"    \"totalprice\": 123,\r",
											"    \"depositpaid\": 12,\r",
											"    \"bookingdates\": {\r",
											"        \"checkin\": null,\r",
											"        \"checkout\": \"2025-29-03\"\r",
											"    },\r",
											"    \"additionalneeds\": \"Pizza\"\r",
											"};\r",
											"pm.request.body.raw = newBook;"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseBody = pm.response.text();\r",
											"\r",
											"pm.test(\"Status code is 400\", () => {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Check responseBody property\", () => {\r",
											"    pm.expect(responseBody).to.have.nested.property(\"booking.bookingdates.checkin\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check if checkin date is not empty\", () => {\r",
											"    pm.expect(responseBody.booking.bookingdates.checkin).to.be.a('string').and.is.not.equal('0NaN-aN-aN');\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base-url}}/booking",
									"host": [
										"{{base-url}}"
									],
									"path": [
										"booking"
									]
								}
							},
							"response": []
						},
						{
							"name": "Null into checkout",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const newBook = {\r",
											"    \"firstname\": \"Kazkas\",\r",
											"    \"lastname\": \"Kazkas\",\r",
											"    \"totalprice\": 123,\r",
											"    \"depositpaid\": 12,\r",
											"    \"bookingdates\": {\r",
											"        \"checkin\": \"2025-29-03\",\r",
											"        \"checkout\": null,\r",
											"    },\r",
											"    \"additionalneeds\": \"Pizza\"\r",
											"};\r",
											"pm.request.body.raw = newBook;"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseBody = pm.response.text();\r",
											"\r",
											"pm.test(\"Status code is 400\", () => {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Check responseBody property\", () => {\r",
											"    pm.expect(responseBody).to.have.nested.property(\"booking.bookingdates.checkout\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check if checkin date is not empty\", () => {\r",
											"    pm.expect(responseBody.booking.bookingdates.checkout).to.be.a('string').and.is.not.equal('0NaN-aN-aN');\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base-url}}/booking",
									"host": [
										"{{base-url}}"
									],
									"path": [
										"booking"
									]
								}
							},
							"response": []
						},
						{
							"name": "Null into checkout Copy",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const newBook = {\r",
											"    \"firstname\": \"Kazkas\",\r",
											"    \"lastname\": \"Kazkas\",\r",
											"    \"totalprice\": 123,\r",
											"    \"depositpaid\": 12,\r",
											"    \"bookingdates\": {\r",
											"        \"checkin\": \"2025-29-03\",\r",
											"        \"checkout\": null,\r",
											"    },\r",
											"    \"additionalneeds\": \"Pizza\"\r",
											"};\r",
											"pm.request.body.raw = newBook;"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseBody = pm.response.text();\r",
											"\r",
											"pm.test(\"Status code is 400\", () => {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Check responseBody property\", () => {\r",
											"    pm.expect(responseBody).to.have.nested.property(\"booking.bookingdates.checkout\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check if checkin date is not empty\", () => {\r",
											"    pm.expect(responseBody.booking.bookingdates.checkout).to.be.a('string').and.is.not.equal('0NaN-aN-aN');\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base-url}}/booking",
									"host": [
										"{{base-url}}"
									],
									"path": [
										"booking"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Additional needs",
					"item": [
						{
							"name": "Without additionalneeds",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const newBook = {\r",
											"    \"firstname\": \"Kazkas\",\r",
											"    \"lastname\": \"Pavardenis\",\r",
											"    \"totalprice\": 12,\r",
											"    \"depositpaid\": \"true\",\r",
											"    \"bookingdates\" : {\r",
											"        \"checkin\": \"2025-03-31\",\r",
											"        \"checkout\": \"2025-04-09\"\r",
											"    },\r",
											"};\r",
											"pm.request.body.raw = newBook;"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseBody = pm.response.json();\r",
											"\r",
											"pm.test(\"Status code is 200\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('Check if bookingid property available', () => {\r",
											"    pm.expect(responseBody).to.have.property('bookingid');\r",
											"});\r",
											"\r",
											"pm.test(\"Check if booking created\", () => {\r",
											"    pm.expect(responseBody.bookingid).to.be.a('number').and.is.not.null;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base-url}}/booking",
									"host": [
										"{{base-url}}"
									],
									"path": [
										"booking"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Get bookings",
			"item": [
				{
					"name": "Get all bookings",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseBody = pm.response.json();\r",
									"\r",
									"pm.test('Response status code 200', () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('Check properties', () => {\r",
									"    pm.expect(responseBody).to.be.an('array');\r",
									"});\r",
									"\r",
									"pm.test('Check responseBody', () => {\r",
									"    responseBody.forEach((obj) => {\r",
									"        pm.expect(obj).to.have.property('bookingid');\r",
									"        pm.expect(obj.bookingid).to.be.a('number').and.is.not.null;\r",
									"    });\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"packages": {},
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base-url}}/booking",
							"host": [
								"{{base-url}}"
							],
							"path": [
								"booking"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get booking by id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseBody = pm.response.json();\r",
									"\r",
									"pm.test('Response status code 200', () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('Check properties', () => {\r",
									"    pm.expect(responseBody).to.be.an('object');\r",
									"    pm.expect(responseBody).to.have.property('firstname').to.be.a('string');\r",
									"    pm.expect(responseBody).to.have.property('lastname').to.be.a('string');\r",
									"    pm.expect(responseBody).to.have.property('totalprice').to.be.a('number');\r",
									"    pm.expect(responseBody).to.have.property('depositpaid').to.be.a('boolean');\r",
									"\r",
									"    pm.expect(responseBody).to.have.property('bookingdates').to.be.an('object');\r",
									"\r",
									"    pm.expect(responseBody.bookingdates).to.have.property('checkin').to.be.a('string');\r",
									"    pm.expect(responseBody.bookingdates).to.have.property('checkout').to.be.a('string');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test('Check if data is correct', () => {\r",
									"    pm.expect(responseBody.firstname).to.be.eql(pm.collectionVariables.get('first-name'));\r",
									"    pm.expect(responseBody.lastname).to.be.eql(pm.collectionVariables.get('last-name'));\r",
									"\r",
									"    pm.expect(responseBody.totalprice).to.be.eql(pm.collectionVariables.get('randomNumber'));\r",
									"\r",
									"    pm.expect(responseBody.depositpaid).to.be.eql(pm.collectionVariables.get('deposit-paid'));\r",
									"\r",
									"    pm.expect(responseBody.bookingdates.checkin).to.be.eql('2025-03-31');\r",
									"    pm.expect(responseBody.bookingdates.checkout).to.be.eql('2025-04-09');\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstname\" : \"Vardenis\",\r\n    \"lastname\" : \"Pavardenis\",\r\n    \"totalprice\" : 12,\r\n    \"depositpaid\" : false,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2025-03-31\",\r\n        \"checkout\" : \"2025-04-09\"\r\n    },\r\n    \"additionalneeds\" : \"Pizza\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base-url}}/booking/{{bookingid}}",
							"host": [
								"{{base-url}}"
							],
							"path": [
								"booking",
								"{{bookingid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Apply filter",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseBody = pm.response.json();\r",
									"\r",
									"pm.test('Response status code 200', () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('Check properties', () => {\r",
									"    pm.expect(responseBody).to.be.an('array');\r",
									"});\r",
									"\r",
									"pm.test('Check responseBody', () => {\r",
									"    responseBody.forEach((obj) => {\r",
									"        pm.expect(obj).to.have.property('bookingid');\r",
									"        pm.expect(obj.bookingid).to.be.a('number').and.is.not.null;\r",
									"    });\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base-url}}/booking?{{first-name}}=&{{last-name}}",
							"host": [
								"{{base-url}}"
							],
							"path": [
								"booking"
							],
							"query": [
								{
									"key": "{{first-name}}",
									"value": ""
								},
								{
									"key": "{{last-name}}",
									"value": null
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get non-existent booking ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstname\" : \"Vardenis\",\r\n    \"lastname\" : \"Pavardenis\",\r\n    \"totalprice\" : 12,\r\n    \"depositpaid\" : false,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2025-03-31\",\r\n        \"checkout\" : \"2025-04-09\"\r\n    },\r\n    \"additionalneeds\" : \"Pizza\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base-url}}/booking/999999",
							"host": [
								"{{base-url}}"
							],
							"path": [
								"booking",
								"999999"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Update booking",
			"item": [
				{
					"name": "Update booking with valid data",
					"item": [
						{
							"name": "Update a booking",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseBody = pm.response.json();\r",
											"\r",
											"pm.collectionVariables.set('firstUpdateName', responseBody.firstname);\r",
											"pm.collectionVariables.set('lastUpdateName', responseBody.lastname);\r",
											"pm.collectionVariables.set('randomNumber', responseBody.totalprice);\r",
											"pm.collectionVariables.set('depositUpdatePaid', responseBody.depositpaid);\r",
											"pm.collectionVariables.set('checkUpdateIn', responseBody.bookingdates.checkin);\r",
											"pm.collectionVariables.set('checkUpdateOut', responseBody.bookingdates.checkout);\r",
											"\r",
											"pm.test('Response status code 200', () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('Check properties', () => {\r",
											"    pm.expect(responseBody).to.be.an('object');\r",
											"    pm.expect(responseBody).to.have.property('firstname').to.be.a('string');\r",
											"    pm.expect(responseBody).to.have.property('lastname').to.be.a('string');\r",
											"    pm.expect(responseBody).to.have.property('totalprice').to.be.a('number');\r",
											"    pm.expect(responseBody).to.have.property('depositpaid').to.be.a('boolean');\r",
											"\r",
											"    pm.expect(responseBody).to.have.property('bookingdates').to.be.an('object');\r",
											"\r",
											"    pm.expect(responseBody.bookingdates).to.have.property('checkin').to.be.a('string');\r",
											"    pm.expect(responseBody.bookingdates).to.have.property('checkout').to.be.a('string');\r",
											"});\r",
											"\r",
											"\r",
											"pm.test('Check if data is correct', () => {\r",
											"    pm.expect(responseBody.firstname).to.be.eql(pm.collectionVariables.get('firstUpdateName'));\r",
											"    pm.expect(responseBody.lastname).to.be.eql(pm.collectionVariables.get('lastUpdateName'));\r",
											"\r",
											"    pm.expect(responseBody.totalprice).to.be.eql(pm.collectionVariables.get('randomNumber'));\r",
											"\r",
											"    const depositPaidValue = pm.collectionVariables.get('depositUpdatePaid') === true;\r",
											"    pm.expect(responseBody.depositpaid).to.be.eql(depositPaidValue);\r",
											"\r",
											"    pm.expect(responseBody.bookingdates.checkin).to.be.eql(pm.collectionVariables.get('checkUpdateIn'));\r",
											"    pm.expect(responseBody.bookingdates.checkout).to.be.eql(pm.collectionVariables.get('checkUpdateOut'));\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 500ms\", () => {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.request.headers.add({\r",
											"    key: 'Authorization',\r",
											"    value: pm.environment.get('authKey')\r",
											"});\r",
											"\r",
											"// pm.collectionVariables.get('token');\r",
											"\r",
											"// pm.request.headers.add({\r",
											"//     key: 'Cookie',\r",
											"//     value: pm.environment.get('cookieKey')\r",
											"// });\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [
									{
										"key": "Cookie",
										"value": "token=0bf6eb2f2c1c681",
										"type": "text",
										"disabled": true
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46cGFzc3dvcmQxMjM=",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstname\" : \"Ričardas\",\r\n    \"lastname\" : \"Džonsonas\",\r\n    \"totalprice\" : 8,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2025-04-23\",\r\n        \"checkout\" : \"2025-05-03\"\r\n    },\r\n    \"additionalneeds\" : \"Chicken\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base-url}}/booking/{{bookingid}}",
									"host": [
										"{{base-url}}"
									],
									"path": [
										"booking",
										"{{bookingid}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Firstname",
					"item": [
						{
							"name": "Without firstname",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.request.headers.add({\r",
											"    key: 'Authorization',\r",
											"    value: pm.environment.get('authKey')\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseBody = pm.response.text();\r",
											"\r",
											"pm.test(\"Status code is 400\", () => {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Check responseBody without firstname\", () => {\r",
											"    pm.expect(responseBody).to.have.nested.property(\"firstname\").that.is.a(\"string\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"lastname\" : \"Džonsonas\",\r\n    \"totalprice\" : 8,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2025-04-23\",\r\n        \"checkout\" : \"2025-05-03\"\r\n    },\r\n    \"additionalneeds\" : \"Chicken\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base-url}}/booking/{{bookingid}}",
									"host": [
										"{{base-url}}"
									],
									"path": [
										"booking",
										"{{bookingid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Empty firstname",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseBody = pm.response.json();\r",
											"\r",
											"pm.test(\"Status code is 400\", () => {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Check responseBody with empty firstname\", () => {\r",
											"    pm.expect(responseBody).to.have.nested.property(\"firstname\").that.is.a(\"string\").and.is.not.empty;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.request.headers.add({\r",
											"    key: 'Authorization',\r",
											"    value: pm.environment.get('authKey')\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstname\" : \"\",\r\n    \"lastname\" : \"Džonsonas\",\r\n    \"totalprice\" : 8,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2025-04-23\",\r\n        \"checkout\" : \"2025-05-03\"\r\n    },\r\n    \"additionalneeds\" : \"Chicken\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base-url}}/booking/{{bookingid}}",
									"host": [
										"{{base-url}}"
									],
									"path": [
										"booking",
										"{{bookingid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Number into firstname",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.request.headers.add({\r",
											"    key: 'Authorization',\r",
											"    value: pm.environment.get('authKey')\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseBody = pm.response.text();\r",
											"\r",
											"pm.test(\"Status code is 400\", () => {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Check responseBody with empty firstname\", () => {\r",
											"    pm.expect(responseBody).to.have.nested.property(\"firstname\").that.is.a(\"string\").and.is.not.empty;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstname\" : 1234,\r\n    \"lastname\" : \"Džonsonas\",\r\n    \"totalprice\" : 8,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2025-04-23\",\r\n        \"checkout\" : \"2025-05-03\"\r\n    },\r\n    \"additionalneeds\" : \"Chicken\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base-url}}/booking/{{bookingid}}",
									"host": [
										"{{base-url}}"
									],
									"path": [
										"booking",
										"{{bookingid}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Lastname",
					"item": [
						{
							"name": "Without lastname",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.request.headers.add({\r",
											"    key: 'Authorization',\r",
											"    value: pm.environment.get('authKey')\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseBody = pm.response.text();\r",
											"\r",
											"pm.test(\"Status code is 400\", () => {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Check responseBody without firstname\", () => {\r",
											"    pm.expect(responseBody).to.have.nested.property(\"lastname\").that.is.a(\"string\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstname\" : \"Ričardas\",\r\n    \"totalprice\" : 8,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2025-04-23\",\r\n        \"checkout\" : \"2025-05-03\"\r\n    },\r\n    \"additionalneeds\" : \"Chicken\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base-url}}/booking/{{bookingid}}",
									"host": [
										"{{base-url}}"
									],
									"path": [
										"booking",
										"{{bookingid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Empty lastname",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.request.headers.add({\r",
											"    key: 'Authorization',\r",
											"    value: pm.environment.get('authKey')\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseBody = pm.response.json();\r",
											"\r",
											"pm.test(\"Status code is 400\", () => {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Check responseBody with empty firstname\", () => {\r",
											"    pm.expect(responseBody).to.have.nested.property(\"lastname\").that.is.a(\"string\").and.is.not.empty;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstname\" : \"Ričardas\",\r\n    \"lastname\" : \"\",\r\n    \"totalprice\" : 8,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2025-04-23\",\r\n        \"checkout\" : \"2025-05-03\"\r\n    },\r\n    \"additionalneeds\" : \"Chicken\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base-url}}/booking/{{bookingid}}",
									"host": [
										"{{base-url}}"
									],
									"path": [
										"booking",
										"{{bookingid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Number into lastname",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.request.headers.add({\r",
											"    key: 'Authorization',\r",
											"    value: pm.environment.get('authKey')\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseBody = pm.response.text();\r",
											"\r",
											"pm.test(\"Status code is 400\", () => {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Check responseBody with empty firstname\", () => {\r",
											"    pm.expect(responseBody).to.have.nested.property(\"lastname\").that.is.a(\"string\").and.is.not.empty;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstname\" : \"Ričardas\",\r\n    \"lastname\" : 12345,\r\n    \"totalprice\" : 8,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2025-04-23\",\r\n        \"checkout\" : \"2025-05-03\"\r\n    },\r\n    \"additionalneeds\" : \"Chicken\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base-url}}/booking/{{bookingid}}",
									"host": [
										"{{base-url}}"
									],
									"path": [
										"booking",
										"{{bookingid}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Non existing id booking",
					"item": [
						{
							"name": "Update a non-existent booking",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 500ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.request.headers.add({\r",
											"    key: 'Authorization',\r",
											"    value: pm.environment.get('authKey')\r",
											"});\r",
											"\r",
											"// pm.collectionVariables.get('token');\r",
											"\r",
											"// pm.request.headers.add({\r",
											"//     key: 'Cookie',\r",
											"//     value: pm.environment.get('cookieKey')\r",
											"// });\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [
									{
										"key": "Cookie",
										"value": "token=0bf6eb2f2c1c681",
										"type": "text",
										"disabled": true
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46cGFzc3dvcmQxMjM=",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstname\" : \"Ričardas\",\r\n    \"lastname\" : \"Džonsonas\",\r\n    \"totalprice\" : 8,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2025-04-23\",\r\n        \"checkout\" : \"2025-05-03\"\r\n    },\r\n    \"additionalneeds\" : \"Chicken\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base-url}}/booking/999999",
									"host": [
										"{{base-url}}"
									],
									"path": [
										"booking",
										"999999"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Delete booking",
			"item": [
				{
					"name": "Delete a booking",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.request.headers.add({\r",
									"    key: 'Authorization',\r",
									"    value: pm.environment.get('authKey')\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseBody = pm.response.text();\r",
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test('ResponseBody shows information about deleted booking', () => {\r",
									"    pm.expect(responseBody).to.eql('Created');\r",
									"})\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46cGFzc3dvcmQxMjM=",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{base-url}}/booking/{{bookingid}}",
							"host": [
								"{{base-url}}"
							],
							"path": [
								"booking",
								"{{bookingid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete a non-existent booking",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.request.headers.add({\r",
									"    key: 'Authorization',\r",
									"    value: pm.environment.get('authKey')\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46cGFzc3dvcmQxMjM=",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{base-url}}/booking/99999",
							"host": [
								"{{base-url}}"
							],
							"path": [
								"booking",
								"99999"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "randomTitle",
			"value": ""
		},
		{
			"key": "randomNumber",
			"value": ""
		},
		{
			"key": "first-name",
			"value": "",
			"type": "string"
		},
		{
			"key": "last-name",
			"value": "",
			"type": "string"
		},
		{
			"key": "deposit-paid",
			"value": "",
			"type": "string"
		},
		{
			"key": "bookingid",
			"value": ""
		},
		{
			"key": "token",
			"value": ""
		},
		{
			"key": "check-in",
			"value": ""
		},
		{
			"key": "check-out",
			"value": ""
		},
		{
			"key": "firstUpdateName",
			"value": ""
		},
		{
			"key": "lastUpdateName",
			"value": ""
		},
		{
			"key": "depositUpdatePaid",
			"value": ""
		},
		{
			"key": "checkUpdateIn",
			"value": ""
		},
		{
			"key": "checkUpdateOut",
			"value": ""
		},
		{
			"key": "toke",
			"value": ""
		},
		{
			"key": "colBasUrl",
			"value": "https://restful-booker.herokuapp.com",
			"type": "string"
		}
	]
}